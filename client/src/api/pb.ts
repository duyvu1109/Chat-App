/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: pb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace api {
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({} & (({
            create_room_request?: CreateRoomRequest;
            create_room_reply?: never;
            chat_request?: never;
            chat_reply?: never;
        } | {
            create_room_request?: never;
            create_room_reply?: CreateRoomReply;
            chat_request?: never;
            chat_reply?: never;
        } | {
            create_room_request?: never;
            create_room_reply?: never;
            chat_request?: ChatRequest;
            chat_reply?: never;
        } | {
            create_room_request?: never;
            create_room_reply?: never;
            chat_request?: never;
            chat_reply?: ChatReply;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("create_room_request" in data && data.create_room_request != undefined) {
                    this.create_room_request = data.create_room_request;
                }
                if ("create_room_reply" in data && data.create_room_reply != undefined) {
                    this.create_room_reply = data.create_room_reply;
                }
                if ("chat_request" in data && data.chat_request != undefined) {
                    this.chat_request = data.chat_request;
                }
                if ("chat_reply" in data && data.chat_reply != undefined) {
                    this.chat_reply = data.chat_reply;
                }
            }
        }
        get create_room_request() {
            return pb_1.Message.getWrapperField(this, CreateRoomRequest, 1) as CreateRoomRequest;
        }
        set create_room_request(value: CreateRoomRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get create_room_reply() {
            return pb_1.Message.getWrapperField(this, CreateRoomReply, 2) as CreateRoomReply;
        }
        set create_room_reply(value: CreateRoomReply) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get chat_request() {
            return pb_1.Message.getWrapperField(this, ChatRequest, 3) as ChatRequest;
        }
        set chat_request(value: ChatRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get chat_reply() {
            return pb_1.Message.getWrapperField(this, ChatReply, 4) as ChatReply;
        }
        set chat_reply(value: ChatReply) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "create_room_request" | "create_room_reply" | "chat_request" | "chat_reply";
            } = {
                0: "none",
                1: "create_room_request",
                2: "create_room_reply",
                3: "chat_request",
                4: "chat_reply"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            create_room_request?: ReturnType<typeof CreateRoomRequest.prototype.toObject>;
            create_room_reply?: ReturnType<typeof CreateRoomReply.prototype.toObject>;
            chat_request?: ReturnType<typeof ChatRequest.prototype.toObject>;
            chat_reply?: ReturnType<typeof ChatReply.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.create_room_request != null) {
                message.create_room_request = CreateRoomRequest.fromObject(data.create_room_request);
            }
            if (data.create_room_reply != null) {
                message.create_room_reply = CreateRoomReply.fromObject(data.create_room_reply);
            }
            if (data.chat_request != null) {
                message.chat_request = ChatRequest.fromObject(data.chat_request);
            }
            if (data.chat_reply != null) {
                message.chat_reply = ChatReply.fromObject(data.chat_reply);
            }
            return message;
        }
        toObject() {
            const data: {
                create_room_request?: ReturnType<typeof CreateRoomRequest.prototype.toObject>;
                create_room_reply?: ReturnType<typeof CreateRoomReply.prototype.toObject>;
                chat_request?: ReturnType<typeof ChatRequest.prototype.toObject>;
                chat_reply?: ReturnType<typeof ChatReply.prototype.toObject>;
            } = {};
            if (this.create_room_request != null) {
                data.create_room_request = this.create_room_request.toObject();
            }
            if (this.create_room_reply != null) {
                data.create_room_reply = this.create_room_reply.toObject();
            }
            if (this.chat_request != null) {
                data.chat_request = this.chat_request.toObject();
            }
            if (this.chat_reply != null) {
                data.chat_reply = this.chat_reply.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.create_room_request !== undefined)
                writer.writeMessage(1, this.create_room_request, () => this.create_room_request.serialize(writer));
            if (this.create_room_reply !== undefined)
                writer.writeMessage(2, this.create_room_reply, () => this.create_room_reply.serialize(writer));
            if (this.chat_request !== undefined)
                writer.writeMessage(3, this.chat_request, () => this.chat_request.serialize(writer));
            if (this.chat_reply !== undefined)
                writer.writeMessage(4, this.chat_reply, () => this.chat_reply.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.create_room_request, () => message.create_room_request = CreateRoomRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.create_room_reply, () => message.create_room_reply = CreateRoomReply.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.chat_request, () => message.chat_request = ChatRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.chat_reply, () => message.chat_reply = ChatReply.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class CreateRoomRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room?: string;
            user?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get room() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set room(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room?: string;
            user?: string;
        }): CreateRoomRequest {
            const message = new CreateRoomRequest({});
            if (data.room != null) {
                message.room = data.room;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            return message;
        }
        toObject() {
            const data: {
                room?: string;
                user?: string;
            } = {};
            if (this.room != null) {
                data.room = this.room;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.room === "string" && this.room.length)
                writer.writeString(1, this.room);
            if (typeof this.user === "string" && this.user.length)
                writer.writeString(2, this.user);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room = reader.readString();
                        break;
                    case 2:
                        message.user = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoomRequest {
            return CreateRoomRequest.deserialize(bytes);
        }
    }
    export class CreateRoomReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room?: string;
            created?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
            }
        }
        get room() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set room(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get created() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set created(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room?: string;
            created?: boolean;
        }): CreateRoomReply {
            const message = new CreateRoomReply({});
            if (data.room != null) {
                message.room = data.room;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            return message;
        }
        toObject() {
            const data: {
                room?: string;
                created?: boolean;
            } = {};
            if (this.room != null) {
                data.room = this.room;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.room === "string" && this.room.length)
                writer.writeString(1, this.room);
            if (this.created !== undefined)
                writer.writeBool(2, this.created);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoomReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoomReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room = reader.readString();
                        break;
                    case 2:
                        message.created = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoomReply {
            return CreateRoomReply.deserialize(bytes);
        }
    }
    export class ChatRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg?: string;
            user?: string;
            room?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
            }
        }
        get msg() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get room() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            msg?: string;
            user?: string;
            room?: string;
        }): ChatRequest {
            const message = new ChatRequest({});
            if (data.msg != null) {
                message.msg = data.msg;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.room != null) {
                message.room = data.room;
            }
            return message;
        }
        toObject() {
            const data: {
                msg?: string;
                user?: string;
                room?: string;
            } = {};
            if (this.msg != null) {
                data.msg = this.msg;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.room != null) {
                data.room = this.room;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.msg === "string" && this.msg.length)
                writer.writeString(1, this.msg);
            if (typeof this.user === "string" && this.user.length)
                writer.writeString(2, this.user);
            if (typeof this.room === "string" && this.room.length)
                writer.writeString(3, this.room);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg = reader.readString();
                        break;
                    case 2:
                        message.user = reader.readString();
                        break;
                    case 3:
                        message.room = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatRequest {
            return ChatRequest.deserialize(bytes);
        }
    }
    export class ChatReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg?: string;
            user?: string;
            room?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
            }
        }
        get msg() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get room() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set room(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            msg?: string;
            user?: string;
            room?: string;
        }): ChatReply {
            const message = new ChatReply({});
            if (data.msg != null) {
                message.msg = data.msg;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.room != null) {
                message.room = data.room;
            }
            return message;
        }
        toObject() {
            const data: {
                msg?: string;
                user?: string;
                room?: string;
            } = {};
            if (this.msg != null) {
                data.msg = this.msg;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.room != null) {
                data.room = this.room;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.msg === "string" && this.msg.length)
                writer.writeString(1, this.msg);
            if (typeof this.user === "string" && this.user.length)
                writer.writeString(2, this.user);
            if (typeof this.room === "string" && this.room.length)
                writer.writeString(3, this.room);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg = reader.readString();
                        break;
                    case 2:
                        message.user = reader.readString();
                        break;
                    case 3:
                        message.room = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatReply {
            return ChatReply.deserialize(bytes);
        }
    }
}
